{"version":3,"sources":["../../jzap/src/environment/Environment.js","../../jzap/src/parser/Parser.js","../../jzap/src/parser/ZapFunction.js","../../jzap/src/log/Log.js","../../jzap/src/ZAP/Zap.js","../../jzap/src/interpreter/Interpreter.js","../../jzap/src/lexer/Lexer.js","../../jzap/src/lexer/tokenList.js","../../jzap/src/evaluator/Evaluator.js","context/AppContext.js","context/ContextProvider.js","components/banner/Banner/styles.js","components/banner/Editor/styles.js","components/banner/Editor/Editor.js","components/banner/Terminal/styles.js","components/banner/Terminal/Terminal.js","components/banner/Logo/styles.js","components/banner/Logo/Logo.js","components/banner/Footer/styles.js","components/banner/Footer/Footer.js","components/banner/Banner/Container.js","App.js","serviceWorker.js","index.js","../../jzap/src/errorHandler/ErrorHandler.js"],"names":["ErrorHandler","require","Environment","enclosing","this","errorHandler","values","identifier","value","Object","keys","includes","assign","throw","get","module","exports","Evaluator","ZapFunction","globalLog","BlockStmt","statement","environment","body","fetchBody","parser","Parser","execute","slice","load","statements","parse","PrintStmt","evaluator","log","expression","fetchExpression","evaluate","undefined","add","ExprStmt","DeclarationStmt","type","line","col","fetchValue","define","IfStmt","thenBlock","elseBlock","index","currentToken","prevToken","openingBrace","closingBrace","checkBrace","isInBlock","push","next","splitBlock","approve","WhileStmt","max","FunctionStmt","args","zapFunction","tokens","previousToken","currentStatement","handleBlock","handlePrint","handleDeclaration","handleIf","handleWhile","handleFunction","handleExpression","stmt","handleStatement","resetCurrentStatement","isSemicolon","length","name","arity","i","Interpreter","Zap","input","interpreter","Lexer","clear","lexer","tokenList","reserved","CharSeperator","charTypes","getCharTypes","split","char","entries","token","verification","charDescription","charSeperator","lex","peakNext","concat","resetCurrentToken","hasDecimal","operatorToTest","doubleCharOperator","isDoubleCharOperator","handleStr","handleNum","handleId","handleOperator","test","Assignment","operate","Binary","leftNode","operator","rightNode","Unary","Call","callee","evaluateArgs","parsedArgs","arg","argValue","call","Literal","parseFloat","Group","Variable","rawExpression","nextToken","openingParen","closingParen","bars","resetToEnd","checkParenthese","checkBar","assigned","expr","currentArgument","group","isInGroup","isForbidden","handleForbidden","prev","isReserved","handleReserved","reset","isLiteral","handleAssignment","isEqualityOperator","handleBinary","isComparissonOperator","isAdditionOperator","isOperator","isMultiplicationOperator","isUnaryOperator","handleUnary","handleCall","handleOpenParen","handlePrimary","handleVariable","AppContext","React","createContext","ContextProvider","props","setValue","setState","logs","state","result","contextValues","Provider","children","Component","BannerContainer","styled","div","gradient","CodeContainer","SectionContainer","Button","Editor","context","options","mode","theme","lineNumbers","onBeforeChange","editor","data","onChange","onClick","contextType","Container","DotContainer","Dot","css","left","color","TextField","Terminal","d","Date","weekDay","getDay","day","getDate","month","getMonth","hour","getHours","minute","getMinutes","sec","getSeconds","map","Fragment","key","Pic","Slogan","span","LogoContainer","Logo","moveUpDown","keyframes","FooterContainer","FooterText","DownArrow","Footer","Banner","gradientList","Math","floor","random","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","msg","err","Error","e"],"mappings":"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","file":"static/js/main.3e8186d4.chunk.js","sourcesContent":["const { ErrorHandler } = require('../errorHandler/ErrorHandler');\n\nclass Environment {\n  constructor(enclosing) {\n    this.errorHandler = new ErrorHandler();\n    this.values = {};\n    this.enclosing = null;\n    if (enclosing) {\n      this.enclosing = enclosing;\n    };\n  };\n\n  define(identifier, value) {\n    this.values[identifier] = value;\n  };\n\n  assign(identifier, value) {\n    if (!Object.keys(this.values).includes(identifier))\n    {\n      if (this.enclosing) \n      {\n        return this.enclosing.assign(identifier, value);\n      } \n      else \n      {\n        this.errorHandler.throw(\n          `UNDEFINED VARIABLE ${identifier}`\n        );\n      }\n    } \n    else \n    {\n      this.values[identifier] = value;\n    };\n  };\n\n  get(identifier) {\n    if (Object.keys(this.values).includes(identifier)) \n    {\n      return this.values[identifier];\n    }\n    else \n    {\n      if (this.enclosing) \n      {\n        return this.enclosing.get(identifier);\n      };\n      this.errorHandler.throw(\n        `UNDEFINED VARIABLE ${identifier}`\n      );\n    };\n  };\n};\n\nmodule.exports = {\n  Environment,\n};","const { ErrorHandler } = require('../errorHandler/ErrorHandler');\nconst { Evaluator } = require('../evaluator/Evaluator');\nconst { Environment } = require('../environment/Environment');\nconst { ZapFunction } = require('./ZapFunction');\n\nconst { globalLog } = require('../log/Log');\n\n\nclass BlockStmt {\n  constructor(statement, environment) {\n    this.statement = statement;\n    this.body = this.fetchBody();\n    this.parser = new Parser(environment);\n    this.execute()\n  };\n\n  fetchBody() {\n    return this.statement.slice(1, -1);\n  };\n\n  execute() {\n    this.parser.load(this.body);\n    this.statements = this.parser.parse();\n  };\n};\n\nclass PrintStmt {\n  constructor(statement, evaluator, log) {\n    this.log = log;\n    this.statement = statement;\n    this.expression = this.fetchExpression();\n    this.evaluator = evaluator;\n    this.value = null;\n    this.execute();\n  };\n\n  fetchExpression() {\n    return this.statement.slice(1);\n  };\n\n  execute() {\n    this.evaluator.load(this.expression);\n    this.value = this.evaluator.evaluate().value;\n\n    if (this.value != undefined) {\n      // console.log(this.value);\n      this.log.add(this.value);\n\n    } else {\n      // console.log();\n      this.log.add('');\n    };\n  };\n};\n\nclass ExprStmt {\n  constructor(statement, evaluator) {\n    this.expression = statement;\n    this.evaluator = evaluator;\n    this.evaluator.load(this.expression);\n    this.value = this.evaluator.evaluate().value;\n  }\n}\n\nclass DeclarationStmt {\n  constructor(statement, evaluator, environment) {\n    this.errorHandler = new ErrorHandler();\n    this.statement = statement;\n    this.evaluator = evaluator;\n    this.environment = environment;\n\n    this.value = null;\n    this.identifier = statement[1].value;\n    this.execute()\n  };\n\n  fetchValue() {\n    let value = null;\n    if (this.statement[2]) {\n      if (this.statement[2].type == 'EQUALS') {\n        let expression = this.statement.slice(3);\n        this.evaluator.load(expression);\n        value = this.evaluator.evaluate().value;\n        if (value == undefined) {\n          this.errorHandler.throw(\n            'INVALID DECLARATION STATEMENT',\n            this.statement[0].line,\n            this.statement[0].col\n          );\n        };\n      }\n      else {\n        this.errorHandler.throw(\n          'INVALID DECLARATION STATEMENT',\n          this.statement[0].line,\n          this.statement[0].col\n        );\n      };\n    };\n    return value;\n  };\n    \n  \n  execute() {\n      this.value = this.fetchValue();\n      return this.environment.define(this.identifier, this.value);\n  };\n};\n\nclass IfStmt {\n  constructor(statement, evaluator, environment) {\n    this.evaluator = evaluator;\n    this.parser = new Parser(environment);\n    this.errorHandler = new ErrorHandler();\n\n    this.statement = statement;\n\n    this.expression = [];\n    this.thenBlock = [];\n    this.elseBlock = null;\n\n    this.index = 1;\n    this.currentToken = this.statement[this.index];\n    this.prevToken = null;\n\n    this.openingBrace = 0;\n    this.closingBrace = 0;\n\n    this.execute();\n  };\n\n  next() {\n    this.prevToken = this.statement[this.index];\n    this.index++;\n    this.currentToken = this.statement[this.index];\n    this.checkBrace();\n  };\n\n  checkBrace() {\n    if (this.currentToken) {\n      if (this.currentToken.type == 'LBRACE') {\n        this.openingBrace++;\n      };\n      if (this.currentToken.type == 'RBRACE') {\n        this.closingBrace++;\n      };\n    };\n  };\n\n  isInBlock() {\n    return this.closingBrace != this.openingBrace;\n  };\n\n  splitBlock() {\n    while (!this.isInBlock()) {\n      this.expression.push(this.currentToken);\n      this.next();\n      if (!this.currentToken) {\n        this.errorHandler.throw(\n          `EXPECTED '{' AFTER EXPRESSION`,\n          this.prevToken.line,\n          this.prevToken.col\n        );\n      };\n    };\n\n    while (this.isInBlock()) {\n      this.thenBlock.push(this.currentToken);\n      this.next();\n      if (!this.currentToken) {\n        this.errorHandler.throw(\n          `EXPECTED '}' AFTER THEN BLOCK`,\n          this.prevToken.line,\n          this.prevToken.col\n        );\n      }\n    };\n    this.thenBlock.push(this.currentToken);\n    this.thenBlock.push({\n      type: 'SEMICOLON', \n      value: ';'\n    });\n    this.next();\n\n    if (this.currentToken) {\n      if (this.currentToken.type == 'ELSE') {\n        this.next();\n        if (this.isInBlock()) {\n          this.elseBlock = [];\n\n          while (this.isInBlock()) {\n            this.elseBlock.push(this.currentToken);\n            this.next();\n            if (!this.currentToken) {\n              this.errorHandler.throw(\n                `EXPECTED '}' AFTER ELSE BLOCK`,\n                this.prevToken.line,\n                this.prevToken.col\n              );\n            };\n          };\n          this.elseBlock.push(this.currentToken);\n          this.elseBlock.push({\n            type: 'SEMICOLON', \n            value: ';'\n          });\n          this.next();\n        }\n        else {\n          this.errorHandler.throw(\n            `UNABLE TO PARSE ELSE STATEMENT`,\n            this.prevToken.line,\n            this.prevToken.col\n          );\n        };\n      }\n      else {\n        this.errorHandler.throw(\n          `UNEXPECTED KEYWORD AFTER IF STATEMENT`,\n          this.prevToken.line,\n          this.prevToken.col\n        );\n      };\n    };\n  };\n\n  execute() {\n    this.splitBlock();\n\n    this.evaluator.load(this.expression);\n    let approve = this.evaluator.evaluate().value;\n\n    if (approve) {\n      this.parser.load(this.thenBlock);\n      this.parser.parse();\n    };\n    if (!approve) {\n      if (this.elseBlock) {\n        this.parser.load(this.elseBlock);\n        this.parser.parse();\n      };\n    };\n  };\n};\n\nclass WhileStmt {\n  constructor(statement, evaluator, environment) {\n    this.evaluator = evaluator;\n    this.parser = new Parser(environment);\n    this.errorHandler = new ErrorHandler();\n\n    this.statement = statement;\n\n    this.expression = [];\n    this.body = [];\n\n    this.index = 1;\n    this.currentToken = this.statement[this.index];\n    this.prevToken = null;\n\n    this.openingBrace = 0;\n    this.closingBrace = 0;\n\n    this.execute();\n  };\n\n  next() {\n    this.prevToken = this.statement[this.index];\n    this.index++;\n    this.currentToken = this.statement[this.index];\n    this.checkBrace();\n  };\n\n  checkBrace() {\n    if (this.currentToken) {\n      if (this.currentToken.type == 'LBRACE') {\n        this.openingBrace++;\n      };\n      if (this.currentToken.type == 'RBRACE') {\n        this.closingBrace++;\n      };\n    };\n  };\n\n  isInBlock() {\n    return this.closingBrace != this.openingBrace;\n  };\n\n  splitBlock() {\n    while (!this.isInBlock()) {\n      this.expression.push(this.currentToken);\n      this.next();\n      if (!this.currentToken) {\n        this.errorHandler.throw(\n          `EXPECTED '{' AFTER EXPRESSION`,\n          this.prevToken.line,\n          this.prevToken.col\n        );\n      };\n    };\n\n    while (this.isInBlock()) {\n      this.body.push(this.currentToken);\n      this.next();\n      if (!this.currentToken) {\n        this.errorHandler.throw(\n          `EXPECTED '}' AFTER BODY OF WHILE`,\n          this.prevToken.line,\n          this.prevToken.col\n        );\n      }\n    };\n    this.body.push(this.currentToken);\n    this.body.push({\n      type: 'SEMICOLON', \n      value: ';'\n    });\n    this.next()\n\n    if (this.currentToken) {\n      this.errorHandler.throw(\n        `UNEXPECTED TOKEN AFTER WHILE STATEMENT`,\n        this.currentToken.line,\n        this.currentToken.col\n      );\n    };\n  };\n\n\n  execute() {\n    this.splitBlock();\n    let max = 1000;\n    this.evaluator.load(this.expression);\n    while (!!this.evaluator.evaluate().value) {\n      this.parser.load(this.body);\n      this.parser.parse();\n      this.evaluator.load(this.expression);\n      max--;\n      if (max <= 0) {\n        this.errorHandler.throw(\n          `MAXIMUM NUMBER OF LOOPS EXCEEDED`\n        );\n        break;\n      };\n    };\n  };\n};\n\nclass FunctionStmt {\n  constructor(statement, evaluator, environment) {\n    this.evaluator = evaluator;\n    this.environment = environment;\n    this.errorHandler = new ErrorHandler();\n\n    this.statement = statement;\n\n    this.identifier = null;\n    this.args = [];\n    this.body = [];\n\n    this.index = 1;\n    this.currentToken = this.statement[this.index];\n    this.prevToken = null;\n\n    this.execute();\n  };\n\n  next() {\n    this.prevToken = this.statement[this.index];\n    this.index++;\n    this.currentToken = this.statement[this.index];\n  };\n\n  splitBlock() {\n    this.identifier = this.currentToken.value;\n    this.next();\n    if (!this.currentToken || this.currentToken.type != 'BAR') {\n      this.errorHandler.throw(\n        `EXPECTED '|' AFTER FUNCTION DECLARATION`,\n        this.prevToken.line,\n        this.prevToken.col\n      );\n    };\n    this.next();\n\n    while (this.currentToken && this.currentToken.type != 'BAR') {\n      this.args.push(this.currentToken);\n      this.next();\n      if (!this.currentToken) {\n        this.errorHandler.throw(\n          `EXPECTED '|' AFTER ARGUMENT LIST`,\n          this.prevToken.line,\n          this.prevToken.col\n        );\n      };\n      if (this.currentToken.type != 'COMMA' && this.currentToken.type != 'BAR') {\n        this.errorHandler.throw(\n          `EXPECTED ',' AFTER ARGUMENT`,\n          this.prevToken.line,\n          this.prevToken.col\n        );\n      }\n      if (this.currentToken.type == 'BAR') {\n        break;\n      };\n      this.next();\n    };\n\n    this.next();\n\n    if (!this.currentToken || this.currentToken.type != 'FATARROW') {\n      this.errorHandler.throw(\n        `EXPECTED '=>' AFTER FN DECLARATION`,\n        this.prevToken.line,\n        this.prevToken.col\n      );\n    };\n    this.next();\n\n    this.body = this.statement.slice(this.index);\n    this.body.push({\n      type : 'SEMICOLON',\n      value : ';',\n    });\n  };\n\n  execute() {\n    this.splitBlock();\n    const zapFunction = new ZapFunction(\n      this.identifier, \n      this.args, \n      this.body, \n      this.environment\n    );\n    this.environment.define(this.identifier, zapFunction);\n  };\n};\n\nclass Parser {\n  constructor (environment) {\n    this.environment = environment\n    this.evaluator = new Evaluator(this.environment);\n    this.errorHandler = new ErrorHandler();\n    this.log = globalLog;\n\n\n    this.tokens = null;\n    this.index = null;\n    this.currentToken = null;\n    this.previousToken = null;\n\n    this.statements = [];\n    this.currentStatement = [];\n\n    this.openingBrace = 0;\n    this.closingBrace = 0;\n  };\n\n  load(tokens) {\n    this.tokens = tokens;\n    this.index = 0;\n    this.currentToken = this.currentToken = this.tokens[this.index];\n    this.previousToken = null;\n\n    this.openingBrace = 0;\n    this.closingBrace = 0;\n\n    this.checkBrace();\n  }\n\n  resetCurrentStatement() {\n    this.currentStatement = [];\n  }\n\n  checkBrace() {\n    if (this.currentToken) {\n      if (this.currentToken.type == 'LBRACE') {\n        this.openingBrace++;\n      };\n      if (this.currentToken.type == 'RBRACE') {\n        this.closingBrace++;\n      };\n    };\n  };\n\n  next() {\n    this.index++;\n    this.currentToken = this.tokens[this.index];\n    this.previousToken = this.tokens[this.index-1];\n\n    this.checkBrace();\n  };\n\n  isInBlock() {\n    return this.openingBrace != this.closingBrace;\n  };\n\n  isSemicolon() {\n    return this.currentToken.type == 'SEMICOLON';\n  };\n\n  handleBlock(statement) {\n    let stmt = new BlockStmt(\n      statement,\n      new Environment(this.environment),\n    );\n    // console.log(stmt);\n    return stmt;\n  };\n\n  handlePrint(statement) {\n    let stmt = new PrintStmt(\n      statement,\n      this.evaluator,\n      this.log,\n    );\n    // console.log(stmt);\n    return stmt;\n  };\n\n  handleDeclaration(statement) {\n    let stmt = new DeclarationStmt(\n      statement,\n      this.evaluator,\n      this.environment,\n    );\n    // console.log(stmt);\n    return stmt;\n  };\n\n  handleIf(statement) {\n    // console.log(statement);\n    let stmt = new IfStmt(\n      statement,\n      this.evaluator,\n      this.environment\n    );\n    // console.log(stmt);\n    return stmt;\n  };\n\n  handleExpression(statement) {\n    let stmt = new ExprStmt(\n      statement,\n      this.evaluator,\n    );\n    // console.log(stmt);\n    return stmt;\n  };\n\n  handleWhile(statement) {\n    let stmt = new WhileStmt(\n      statement,\n      this.evaluator,\n      this.environment\n    );\n    // console.log(stmt);\n    return stmt;\n  }\n\n  handleFunction(statement) {\n    let stmt = new FunctionStmt(\n      statement,\n      this.evaluator,\n      this.environment\n    );\n    // console.log(stmt);\n    return stmt;\n  }\n\n  handleStatement(statement) {\n    // console.log(statement);\n    if (statement[0].type == 'LBRACE') {\n      return this.handleBlock(statement)\n    };\n\n    if (statement[0].type == 'SHOW') {\n      return this.handlePrint(statement);\n    };\n\n    if (statement[0].type == 'DECLARATOR') {\n      return this.handleDeclaration(statement);\n    };\n\n    if (statement[0].type == 'IF') {\n      return this.handleIf(statement);\n    };\n\n    if (statement[0].type == 'WHILE') {\n      return this.handleWhile(statement);\n    };\n\n    if (statement[0].type == 'FUNCTION') {\n      return this.handleFunction(statement);\n    };\n\n    return this.handleExpression(statement);\n  };\n\n  parse() {\n    while (this.currentToken) {\n      if (!this.isInBlock())\n      {\n        if (!this.isSemicolon()) {\n          this.currentStatement.push(this.currentToken);\n        } else {\n          let stmt = this.handleStatement(this.currentStatement);\n          this.statements.push(stmt);\n          this.resetCurrentStatement();\n        };\n        this.next()\n        continue;\n      } \n      else \n      {\n        this.currentStatement.push(this.currentToken);\n        if (!this.isInBlock()) {\n          let stmt = this.handleStatement(this.currentStatement);\n          this.statements.push(stmt);\n          this.resetCurrentStatement();\n        };\n        this.next();\n      };\n    };\n\n    if (this.currentStatement.length) {\n      this.errorHandler.throw(\n        'YOU MUST HAVE FORGOTTEN A SEMICOLON OR CLOSING BRACE',\n        this.previousToken.line,\n        this.previousToken.col\n      );\n    };\n\n    return this.statements;\n\n  };\n};\n\nmodule.exports = {\n  Parser,\n};","const { ErrorHandler } = require('../errorHandler/ErrorHandler');\nconst { Environment } = require('../environment/Environment');\n\nclass ZapFunction {\n  constructor(name, args, body, environment) {\n    const { Parser } = require('./Parser');\n\n    this.errorHandler = new ErrorHandler();\n    this.environment = new Environment(environment);\n    this.parser = new Parser(this.environment);\n    this.name = name;\n    this.args = args;\n    this.body = body;\n    this.arity = args.length;\n  };\n\n  call(args) {\n    if (args.length != this.args.length) {\n      this.errorHandler.throw(\n        `INVALID NUMBER OF ARGUMENTS PASSED TO ${this.name}`,\n      )\n    };\n\n    for (let i=0; i < args.length; i++) {\n      this.environment.define(this.args[i]['value'], args[i]);\n    };\n    \n    this.parser.load(this.body);\n    this.parser.parse();\n  };\n};\n\nmodule.exports = {\n  ZapFunction,\n};","class Log {\n  constructor() {\n    this.values= [];\n  };\n\n  add(log) {\n    this.values.push(log);\n  };\n  \n  clear() {\n    this.values = [];\n    return this;\n  };\n};\n\nlet globalLog = new Log();\n\nmodule.exports = {\n  globalLog,\n};","const { Interpreter } = require('../interpreter/Interpreter');\nconst fs = require('fs');\n\nclass Zap {\n  constructor(input) {\n    this.input = input;\n    this.interpreter = new Interpreter(this.input);\n  };\n};\n\nconst fetchSource = () => {\n  let file = process.argv[2];\n  if (!file)\n  {\n    console.log('USAGE -- [ node Zap.js <filename> ]');\n  }\n  else\n  {\n    try \n    {\n      const data = fs.readFileSync(file, 'utf8');\n      return data  \n    } \n    catch(e) \n    {\n      console.log('USAGE -- [ node Zap.js <filename> ]');\n      console.log('Error:', e.stack);\n    };\n  };\n\n  return [];\n\n};\n\n// console.time('interpreting');\n// new Zap(fetchSource());\n// console.timeEnd('interpreting');\n\nmodule.exports = {\n  Zap,\n};","const { ErrorHandler } = require('../errorHandler/ErrorHandler');\nconst { Lexer } = require('../lexer/Lexer');\nconst { Environment } = require('../environment/Environment');\nconst { Parser } = require('../parser/Parser');\n\nconst { globalLog } = require('../log/Log');\n\nclass Interpreter {\n  constructor(input) {\n    globalLog.clear();\n    \n    this.errorHandler = new ErrorHandler();\n    this.environment = new Environment(null);\n    this.lexer = new Lexer(input);\n    this.parser = new Parser(this.environment);\n    this.parser.load(this.lexer.tokens);\n    this.statements = this.parser.parse();\n  };\n};\n\nmodule.exports = {\n  Interpreter,\n};","const { tokenList , reserved } = require('./tokenList');\nconst { ErrorHandler } = require('../errorHandler/ErrorHandler');\n\nclass CharSeperator {\n  constructor(input) {\n    this.errorHandler = new ErrorHandler();\n    this.input = input;\n    this.charTypes = [];\n    this.getCharTypes();\n  };\n\n  getCharTypes() {\n    let line = 1;\n    let col = 1;\n    for (let char of this.input.split('')) {\n      for (let [ token , verification ] of Object.entries(tokenList)) {\n        if (verification(char)) {\n          const charDescription = {};\n          charDescription['type'] = token;\n          charDescription['line'] = line;\n          charDescription['col'] = col;\n          charDescription['value'] = char;\n          if (charDescription.type == \"UNRECOGNIZED\") {\n            this.errorHandler.throw(`UNRECOGNIZED SYNTAX`, charDescription['line'], charDescription['col']);\n          } else {\n            this.charTypes.push(charDescription);\n          };\n          break;\n        }\n      }\n      if (char == '\\n') {\n        col = 1;\n        line++;\n      } else {\n        col++;\n      };\n    };\n  };\n};\n\n\n/*\n\n\n\n                          {[{[ --> THE LEXER <-- ]}]}\n\n                  The goal here is to take a stream of inputs\n               & separate it into tokens that have meaning to the\n                                   language.\n\n               We start by separating each character of the stream\n                                  by its type.\n                             The possible types are:\n\n           1. +  2. -  3. *  4. /  5. %  6. =  7. == 8. != 9. >  10.  <\n\n           11.<= 12.<= 13. ! 14. ( 15. ) 16. { 17. } 18. ; 19. ' 20. .\n\n       Besides these types, the char can be a Letter, Number or Whitespace.\n\n\n              After classifying all the characters, we can move on\n          to grouping these symbols into larger lexemes or tokens that\n                   our language will be able to understand.\n\n\n\n*/\n\n\nclass Lexer {\n  constructor (input) {\n    this.charSeperator = new CharSeperator(input);\n    this.errorHandler = new ErrorHandler();\n    this.charTypes = this.charSeperator.charTypes;\n    this.index = 0;\n    this.char = this.charTypes[this.index];\n    this.currentToken = {};\n    this.tokens = [];\n    this.lex();\n  }\n\n  resetCurrentToken() {\n    this.currentToken = {};\n  }\n\n  next() {\n    this.index++;\n    this.char = this.charTypes[this.index];\n  };\n\n  peakNext() {\n    try {\n      return this.charTypes[this.index + 1];\n    } catch {\n      return false;\n    };\n  };\n\n  handleStr() {\n    this.currentToken = {\n      \"type\" : \"STRING\",\n      \"line\" : this.char.line,\n      \"col\" : this.char.col,\n      \"value\" : \"\",\n    };\n\n    if (this.peakNext()) {\n      this.next();\n    } else {\n      this.errorHandler.throw('EOF WHILE PARSING STRING', this.currentToken.line, this.currentToken.col);\n    }\n\n    while (this.char.type != \"QUOTE\") {\n      this.currentToken.value = this.currentToken.value.concat(this.char.value);\n      this.next();\n      if (!this.char) {\n        this.errorHandler.throw('EOF WHILE PARSING STRING', this.currentToken.line, this.currentToken.col);\n      };\n    };\n    this.tokens.push(this.currentToken);\n    this.resetCurrentToken();\n    this.next();\n    this.lex();\n  };\n\n  handleNum() {\n    let hasDecimal = false;\n\n    this.currentToken = {\n      \"type\" : \"NUMBER\",\n      \"line\" : this.char.line,\n      \"col\" : this.char.col,\n      \"value\" : \"\",\n    };\n\n    // Long statements to handle decimal and int numbers\n    while (this.char.type == \"NUMBER\" || (!hasDecimal && this.char.type == \"DOT\" && this.peakNext() && this.peakNext().type == \"NUMBER\")) {\n      if (this.char.type == \"DOT\") {\n        hasDecimal = true;\n      };\n      this.currentToken.value = this.currentToken.value.concat(this.char.value);\n      this.next();\n      if (!this.char) {\n        break;\n      };\n    };\n    this.tokens.push(this.currentToken);\n    this.resetCurrentToken();\n    this.lex();\n  };\n\n  handleId() {\n    this.currentToken = {\n      \"type\" : \"IDENTIFIER\",\n      \"line\" : this.char.line,\n      \"col\" : this.char.col,\n      \"value\" : \"\",\n    };\n\n    while (this.char.type == \"NUMBER\" || this.char.type == \"LETTER\") {\n      this.currentToken.value = this.currentToken.value.concat(this.char.value);\n      this.next();\n      if (!this.char) {\n        break;\n      };\n    };\n\n    if (Object.keys(reserved).includes(this.currentToken.value)) {\n      this.currentToken.type = reserved[this.currentToken.value];\n    };\n\n    this.tokens.push(this.currentToken);\n    this.resetCurrentToken();\n    this.lex();\n  };\n\n\n  isDoubleCharOperator() {\n    if (this.peakNext()) {\n      let operatorToTest = this.char.value.concat(this.peakNext().value)\n      for (let [ type , verification ] of Object.entries(tokenList)) {\n        if (verification(operatorToTest) && (type != \"UNRECOGNIZED\")) {\n          return {\n            \"type\" : type,\n            \"line\" : this.char.line,\n            \"col\" : this.char.col,\n            \"value\" : operatorToTest,\n          };\n        };\n      };\n      return false;\n    };\n  };\n\n  handleOperator() {\n    if (this.char.type != \"WHITESPACE\") {\n      let doubleCharOperator = this.isDoubleCharOperator();\n      if (doubleCharOperator) {\n        this.next();\n        this.currentToken = doubleCharOperator;\n        this.tokens.push(this.currentToken);\n        this.resetCurrentToken();\n      } else {\n        this.currentToken = this.char;\n        this.tokens.push(this.currentToken);\n        this.resetCurrentToken();\n      };\n    };\n    this.next();\n    this.lex();\n  };\n\n  lex() {\n    if (this.char) {\n      switch(this.char.type) {\n        case \"QUOTE\":\n          this.handleStr();\n          break;\n        case \"NUMBER\":\n          this.handleNum();\n          break;\n        case \"LETTER\":\n          this.handleId();\n          break;\n        default:\n          this.handleOperator();\n      };\n    };\n  };\n};\n\nmodule.exports = {\n  Lexer,\n};","const tokenList = {\n  \"PLUS\" : (input) => input == '+',\n  \"MINUS\" : (input) => input == '-',\n  \"DIVIDE\" : (input) => input == '/',\n  \"MULTIPLY\" : (input) => input == '*',\n  \"MODULO\" : (input) => input == '%',\n\n  \"EQUALS\" : (input) => input == '=',\n\n  \"GREATERTHAN\" : (input) => input == '>',\n  \"LESSTHAN\" : (input) => input == '<',\n  \"NOT\" : (input) => input == '!',\n  \"GREATERTHANEQUAL\" : (input) => input == '>=',\n  \"LESSTHANEQUAL\" : (input) => input == '<=',\n  \"NOTEQUALTO\" : (input) => input == '!=',\n  \"EQUALTO\" : (input) => input == '==',\n\n  \"FATARROW\" : (input) => input == '=>',\n\n  \"LPAREN\" : (input) => input == '(',\n  \"RPAREN\" : (input) => input == ')',\n  \"LBRACE\" : (input) => input == '{',\n  \"RBRACE\" : (input) => input == '}',\n\n  \"BAR\" : (input) => input == '|',\n  \"COMMA\" : (input) => input == ',',\n\n  \"SEMICOLON\" : (input) => input ==';',\n  \"QUOTE\" : (input) => input == \"'\",\n  \"DOT\" : (input) => input =='.',\n\n  \"DECLARATOR\" : (input) => input == '@',\n\n  \"NUMBER\" : (input) => /^[0-9]+$/.test(input),\n  \"LETTER\" : (input) => /^[a-zA-Z]+$/.test(input),\n  \"WHITESPACE\" : (input) => !/\\S/.test(input),\n\n  \"UNRECOGNIZED\" : (input) => true,\n};\n\nconst reserved = {\n  \"for\" : 'FOR',\n  \"while\" : 'WHILE',\n  \"return\" : 'RETURN',\n  \"show\" : \"SHOW\",\n  \"if\" : \"IF\",\n  \"else\" : \"ELSE\",\n  \"fn\" : \"FUNCTION\",\n};\n\nmodule.exports = {\n  tokenList,\n  reserved,\n};","const { ErrorHandler } = require('../errorHandler/ErrorHandler');\nconst { ZapFunction } = require('../parser/ZapFunction');\n\nclass Assignment {\n  constructor(token, expression, evaluator, environment) {\n    this.identifier = token.value;\n    this.expression = expression;\n\n    this.evaluator = evaluator;\n    this.environment = environment;\n    this.evaluator.load(expression);\n    this.value = this.evaluator.evaluate().value;\n    this.operate();\n  };\n  operate() {\n    this.environment.assign(this.identifier, this.value);\n  };\n};\n\nclass Binary {\n  constructor(leftNode, operator, rightNode, evaluator) {\n    this.evaluator = evaluator;\n\n    this.evaluator.load(leftNode);\n    this.leftNode = this.evaluator.evaluate();\n\n    this.evaluator.load(rightNode);\n    this.rightNode = this.evaluator.evaluate();\n    \n    this.operator = operator.type;\n    this.value = this.operate();\n  };\n\n  operate() {\n    if (this.operator == 'PLUS') {\n      return this.leftNode.value + this.rightNode.value;\n    };\n    if (this.operator == 'MINUS') {\n      return this.leftNode.value - this.rightNode.value;\n    };\n    if (this.operator == 'MULTIPLY') {\n      return this.leftNode.value * this.rightNode.value;\n    };\n    if (this.operator == 'DIVIDE') {\n      return this.leftNode.value / this.rightNode.value;\n    };\n    if (this.operator == 'MODULO') {\n      return this.leftNode.value % this.rightNode.value;\n    };\n    if (this.operator == 'EQUALTO') {\n      return this.leftNode.value == this.rightNode.value;\n    };\n    if (this.operator == 'NOTEQUALTO') {\n      return this.leftNode.value != this.rightNode.value;\n    };\n    if (this.operator == 'GREATERTHAN') {\n      return this.leftNode.value > this.rightNode.value;\n    };\n    if (this.operator == 'LESSTHAN') {\n      return this.leftNode.value < this.rightNode.value;\n    };\n    if (this.operator == 'GREATERTHANEQUAL') {\n      return this.leftNode.value >= this.rightNode.value;\n    };\n    if (this.operator == 'LESSTHANEQUAL') {\n      return this.leftNode.value <= this.rightNode.value;\n    };\n  }\n};\n\nclass Unary {\n  constructor(operator , expression, evaluator) {\n    this.evaluator = evaluator;\n    this.evaluator.load(expression);\n\n    this.operator = operator;\n    this.expression = expression;\n    this.value = this.operate();\n  }\n  operate() {\n    if (this.operator.type == \"MINUS\") {  \n      return ( - ( this.evaluator.evaluate().value ) );\n    };\n    if (this.operator.type == \"PLUS\") {\n      return (this.evaluator.evaluate().value);\n    }\n    if (this.operator.type == \"NOT\") {\n      return !(this.evaluator.evaluate().value);\n    }\n  };\n}\n\nclass Call {\n  constructor(callee, args, evaluator, environment) {\n    this.errorHandler = new ErrorHandler();\n    this.callee = callee;\n    this.evaluator = evaluator;\n    this.args = this.evaluateArgs(args);\n    this.environment = environment;\n    this.value = this.operate();\n  };\n\n  evaluateArgs(args) {\n    let parsedArgs = [];\n    for (let arg of args) {\n      this.evaluator.load(arg);\n      let argValue = this.evaluator.evaluate().value;\n      parsedArgs.push(argValue);\n    }\n    return parsedArgs;\n  };\n\n  operate() {\n    const zapFunction = this.environment.get(this.callee.value);\n    if (!(zapFunction instanceof ZapFunction)) {\n      this.errorHandler.throw(\n        `INVALID CALLEE TYPE`,\n        this.callee.line,\n        this.callee.col,\n      );\n    };\n    return zapFunction.call(this.args);\n  };\n};\n\nclass Literal {\n  constructor(token) {\n    if (token.type == \"NUMBER\") {\n      this.value = parseFloat(token.value);\n    };\n    if (token.type == \"STRING\") {\n      this.value = token.value;\n    };\n  };\n};\n\nclass Group {\n  constructor(expression, evaluator) {\n    this.evaluator = evaluator;\n    this.evaluator.load(expression);\n    this.value = this.evaluator.evaluate().value;\n  };\n};\n\nclass Variable {\n  constructor(token, environment) {\n    this.identifier = token.value;\n    this.environment = environment;\n    this.value = this.fetchValue();\n  }\n  fetchValue() {\n    return this.environment.get(this.identifier);\n  };\n}\n\n/*\n                 ::::{[{[ --> THE EVALUATING LOGIC <-- ]}]}::::\n\n        The logic behind the evaluator is to create a tree of operations.\n      It starts by iterating through the Whole raw expression (token list),\n                            from right to left,\n              trying to find the operators of lowest precedence \n                    (the ones that will be executed last).\n              As soon as it finds an operator of type \"+\" or \"-\",\n                 it becomes the first expression in the tree.\n       The expressions can be of 4 types: Binary, Unary, Group or Literal.\n\n             The Evaluator will iterate through the raw Expression,\n                  Always trying break down bigger expressions\n             into smaller ones until it works with only Primaries.\n\n                             THE EXPRESSION TYPES\n\n          Binary Expressions :\n            --> Have a left and right sub-expression, along with an operator.\n            --> The expression's value is calculated by\n                joining the values of the left and right \n                sub-expressions through the operator.\n            --> EXAMPLES:\n      \n          1.     \"PLUS\"                    2.        \"MULTPLY\"                                            \n                   /\\                                    /\\                            \n                  /  \\                                  /  \\                           \n                 5    6                               5+6  7-3                    \n                                                                                  \n           Calculated Value: 11                  Calculated Value: 44                                                                 \n                         \n            --> {{ RECURSION ALERT }}\n                Notice how in Example 2,\n                the sub-expressions are also of type \"Binary Expression\"   \n\n\n\n          Unary Expressions :\n            --> Have a sub-expression, along with a unary operator (\"!\" or \"-\").\n            --> The expression's value is calculated by\n                joining the value of the sub-expression with the operator.\n            --> EXAMPLES:\n      \n          1.     \"PLUS\"                    2.        \"MINUS\"                                            \n                    |                                   |                           \n                    5                                   9                     \n                                                                \n                                                                                  \n           Calculated Value: 5                  Calculated Value: -9                                                                 \n                          \n\n\n          Group Expressions :\n            --> Are the ones in between parenthesis.\n            --> The expression's value is calculated by parsing\n                the expression in between parenthesis.\n            --> Examples:\n          \n          1.    \"(2 + 3)\"                                                             \n                    |\n                    V                                                         \n                   2+3    \n                    |\n                    V\n                  \"PLUS\"                                           \n                    /\\                                            \n                   /  \\\n                  2    3\n                   \n           Calculated Value: 5                   \n                \n                     \n           \n          Primary Expressions :\n            --> Are the ones that represent a Literal (String, Int, Float, etc.).\n            --> The expression's value is the Literal it holds.\n            --> Examples:\n          \n          1.      \"245\"                                                             \n                    \n           Calculated Value: 245                              \n\n\n                            {[{[ --> EXAMPLE <--]}]}\n                                                                                                                                                                                  \n                    (3 + 5) - 8 * (4 - (8 / 2) - 7) + 4 * (9)                                                                                                                                                    \n                                                    |                                                                                                                              \n                                                  \"PLUS\"                                                                                                                                           \n                                                    /\\                                                                                                                                         \n                                                   /  \\                                                                                                                                        \n                     (3 + 5) - 8 * (4 - (8 / 2) - 7)   4 * (9)                                                                                                                                                                 \n                             |                           |                                    \n                          \"MINUS\"                      \"MULT\"                                                                                                                                  \n                            /\\                           /\\                                                                                                                                                                                       \n                           /  \\                         4   (9)                                                                                                                                                       \n                          /    \\                             |                                                                    \n                  (3 + 5)      8 * (4 - (8 / 2) - 7)         9                                                                                       \n                /                |                                                                                                          \n          GROUP(3+5)         \"MULTIPLY\"                                                                                                      \n              |                  /\\                                                                                         \n            3 + 5               /  \\                                                                     \n              |                8    (4 - (8 / 2) - 7)                                                         \n            \"PLUS\"                          |                             \n              /\\                     4 - (8 / 2) - 7                                                     \n             /  \\                                |                                         \n            3    5                            \"MINUS\"                                 \n                                                 /\\                             \n                                                /  \\                              \n                                    4 - (8 / 2)      7                         \n                                      |                                        \n                                   \"MINUS\"                                          \n                                      /\\                                                                        \n                                     /  \\                                                                                                        \n                                    4    (8 / 2)                                                                    \n                                            |                                                                \n                                          8 / 2                                                                  \n                                            |                                                                \n                                         \"DIVIDE\"                                                                   \n                                            /\\                                                                \n                                           /  \\        \n                                          8    2\n                                           \n\n*/\n\nclass Evaluator {\n  constructor(environment) {\n    this.environment = environment;\n\n    this.errorHandler = new ErrorHandler();\n    this.rawExpression = null;\n    this.index = null;\n    this.previousToken = null;\n    this.currentToken = null;\n    this.nextToken = null;\n    this.openingParen = 0;\n    this.closingParen = 0;\n    this.bars = 0;\n  };\n\n  load(tokens) {\n    this.rawExpression = tokens;\n    this.resetToEnd();\n  }\n\n  reset() {\n    this.index = 0;\n    this.previousToken = null;\n    this.currentToken = this.rawExpression[this.index];\n    this.nextToken = this.rawExpression[this.index+1];\n    this.openingParen = 0;\n    this.closingParen = 0;\n\n    this.checkParenthese();\n    this.checkBar();\n  };\n\n  resetToEnd() {\n    this.index = this.rawExpression.length - 1;\n    this.previousToken = this.rawExpression[this.index - 1];\n    this.currentToken = this.rawExpression[this.index];\n    this.nextToken = null;\n    this.openingParen = 0;\n    this.closingParen = 0;\n\n    this.checkParenthese();\n    this.checkBar();\n  };\n\n  next() {\n    this.index++;\n    this.previousToken = this.rawExpression[this.index-1];\n    this.currentToken = this.rawExpression[this.index];\n    this.nextToken = this.rawExpression[this.index+1];\n    \n    this.checkParenthese();\n    this.checkBar();\n  };\n\n  prev() {\n    this.index--;\n    this.previousToken = this.rawExpression[this.index-1];\n    this.currentToken = this.rawExpression[this.index];\n    this.nextToken = this.rawExpression[this.index+1];\n    \n    this.checkParenthese();\n    this.checkBar();\n  };\n\n  checkParenthese() {\n    if (this.currentToken) {\n      if (this.currentToken.type == \"LPAREN\") {\n        this.openingParen++;\n      };\n      if (this.currentToken.type == \"RPAREN\") {\n        this.closingParen++;\n      };\n    };\n  };\n\n  checkBar() {\n    if (this.currentToken) {\n      if (this.currentToken.type == \"BAR\") {\n        this.bars++;\n      };\n    };\n  };\n\n  isInGroup() {\n    return (this.openingParen != this.closingParen) || (this.bars % 2 != 0);\n  }\n\n  isOperator(token) {\n    let operators = [\n      \"MULTIPLY\", \n      \"DIVIDE\", \n      \"PLUS\", \n      \"MINUS\", \n      \"MODULO\", \n      \"GREATERTHAN\", \n      \"GREATERTHANEQUAL\",\n      \"LESSTHAN\",\n      \"LESSTHANEQUAL\", \n      \"EQUALTO\",\n      \"NOTEQUALTO\",\n      \"NOT\",\n    ];\n    return (operators.includes(token.type) );\n  };\n\n  isEqualityOperator(token) {\n    let operators = [\n      \"EQUALTO\",\n      \"NOTEQUALTO\",\n    ];\n    return (operators.includes(token.type) );\n  }\n\n  isComparissonOperator(token) {\n    let operators = [ \n      \"GREATERTHAN\", \n      \"GREATERTHANEQUAL\",\n      \"LESSTHAN\",\n      \"LESSTHANEQUAL\", \n    ];\n    return (operators.includes(token.type) );\n  }\n\n  isAdditionOperator(token) {\n    let operators = [\n      \"PLUS\",\n      \"MINUS\",\n    ];\n    return (operators.includes(token.type) );\n  }\n\n  isMultiplicationOperator(token) {\n    let operators = [\n      \"MULTIPLY\",\n      \"DIVIDE\",\n      \"MODULO\",\n    ];\n    return (operators.includes(token.type) );\n  }\n\n  isUnaryOperator(token) {\n    let operators = [\n      \"MINUS\",\n      \"NOT\",\n      \"PLUS\",\n    ];\n    return (operators.includes(token.type) );\n  }\n\n  isLiteral(token) {\n    let types = [\n      \"STRING\",\n      \"NUMBER\",\n    ];\n    return (types.includes(token.type) );\n  }\n\n  isReserved(token) {\n    let types = [ \n      \"FOR\", \n      \"WHILE\",\n      \"RETURN\",\n      \"SHOW\", \n    ];\n    return types.includes(token.type);\n  };\n\n  isForbidden(token) {\n    let types = [ \n      \"RBRACE\",\n      \"LBRACE\",\n      \"SEMICOLON\", \n      \"DOT\",\n      \"DECLARATOR\",\n    ];\n    return types.includes(token.type);\n  }\n\n  handleAssignment() {\n    // console.log('isAssignment')\n    let assigned = this.rawExpression.slice(0, this.index);\n    let expression = this.rawExpression.slice(this.index+1);\n\n    if (assigned.length != 1 || !expression.length) {\n      this.errorHandler.throw(\n        'UNABLE TO PARSE ASSIGNMENT',\n        this.currentToken.line,\n        this.currentToken.col\n      );\n    };\n\n    let identifier = assigned[0];\n\n    if (identifier.type != 'IDENTIFIER') {\n      this.errorHandler.throw(\n        'INVALID ASSIGNEE',\n        this.currentToken.line,\n        this.currentToken.col\n      );\n    };\n\n    let node = new Assignment(\n      identifier,\n      expression,\n      this,\n      this.environment\n    );\n    return node;\n  };\n\n  handleBinary() {\n    // console.log('isBinary')\n    let leftNode = this.rawExpression.slice(0, this.index);\n    let rightNode = this.rawExpression.slice(this.index+1);\n\n    if (!leftNode.length || !rightNode.length) {\n      this.errorHandler.throw(\n        'UNABLE TO PARSE BINARY EXPRESSION',\n        this.currentToken.line,\n        this.currentToken.col\n      );\n    };\n\n    let node = new Binary(\n      leftNode,\n      this.currentToken,\n      rightNode,\n      this\n    )\n    return node;\n  }\n\n  handleUnary() {\n    // console.log('isUnary')\n    let expr = this.rawExpression.slice(this.index+1);\n\n    if (!expr.length) {\n      this.errorHandler.throw(\n        'UNABLE TO PARSE UNARY EXPRESSION',\n        this.currentToken.line,\n        this.currentToken.col\n      );\n    }\n\n    let node = new Unary(\n      this.currentToken,\n      expr,\n      this,\n    );\n    return node;\n  };\n\n  handleCall() {\n    let callee = this.previousToken;\n    let args = [];\n    let currentArgument = [];\n\n    this.next();\n    if (!this.currentToken) {\n      this.errorHandler.throw(\n        `UNABLE TO PARSE CALL EXPRESSION`,\n        this.previousToken.line,\n        this.previousToken.col\n      );\n    }\n\n    while (this.currentToken.type != 'BAR') {\n      if (this.currentToken.type != 'COMMA') {\n        currentArgument.push(this.currentToken);\n      } else {\n        args.push(currentArgument);\n        currentArgument = [];\n      };\n      this.next();\n      if (!this.currentToken) {\n        this.errorHandler.throw(\n          `EXPECTED '|' after argument list`,\n          this.previousToken.line,\n          this.previousToken.col\n        )\n      };\n    };\n\n    if (currentArgument.length) {\n      args.push(currentArgument);\n      currentArgument = [];\n    }\n    \n    let node = new Call(\n      callee,\n      args,\n      this,\n      this.environment,\n    )\n    return node;\n  };\n\n  handleOpenParen() {\n    // console.log('isGroup')\n    let group = []\n    while (this.isInGroup()) {\n      group.push(this.currentToken);\n      this.next();\n      if (!this.currentToken) {\n        this.errorHandler.throw(`EXPECTED ')' AFTER EXPRESSION -- EOF`);\n      };\n    };\n    let node = new Group(\n      group,\n      this\n      );\n    return node;\n  };\n\n  handlePrimary() {\n    // console.log('isPrimary')\n    let node = new Literal(this.currentToken);\n    return node;\n  };\n\n  handleVariable() {\n    // console.log('isVariable')\n    let node = new Variable(\n      this.currentToken, \n      this.environment\n    );\n    return node;\n  };\n\n  handleReserved() {\n    this.errorHandler.throw(\n      'UNEXPECTED KEYWORD',\n      this.currentToken.line,\n      this.currentToken.col,\n    );\n  };\n\n  handleForbidden() {\n    this.errorHandler.throw(\n      'FORBIDDEN SYMBOL IN EXPRESSION',\n      this.currentToken.line,\n      this.currentToken.col,\n    );\n  };\n\n  evaluate() {\n    // console.log('expression to parse');\n    // console.log(this.rawExpression);\n\n    /*\n      Parsing the expressions with lowest precedence (EQUALITY)\n      We iterate through the rawExpression from right to left due to the association rule of these operators.\n\n      The order of precedence is as follows\n      --> EQUALITY\n      --> COMPARISSON\n      --> ADDITION - SUBTRACTION\n      --> MULTIPLICATION - DIVISION\n      --> UNARY\n      --> GROUP\n      --> PRIMARY\n    */\n\n\n    while (this.currentToken) {\n      if (this.isForbidden(this.currentToken)) {\n        this.handleForbidden();\n      };\n      this.prev();\n    };\n    this.resetToEnd();\n\n    while (this.currentToken) {\n      if (this.isReserved(this.currentToken)) {\n        this.handleReserved();\n      };\n      this.prev();\n    };\n    this.reset();\n\n    while (this.currentToken && this.nextToken) {\n      if (this.isLiteral(this.currentToken) && this.isLiteral(this.nextToken)) { \n        this.errorHandler.throw(\n          'UNEXPECTED LITERAL',\n          this.nextToken.line,\n          this.nextToken.col\n        );\n      };\n      this.next();\n    };\n    this.reset();\n\n    while (this.currentToken) {\n      if (this.currentToken.type == 'EQUALS') {\n        if (!this.isInGroup()) {\n          return this.handleAssignment();\n        };\n      };\n      this.next();\n    };\n    this.resetToEnd();\n\n    while (this.index >= 0) {\n      if (this.isEqualityOperator(this.currentToken)) {\n        if (!this.isInGroup()) {\n          return this.handleBinary();\n        };\n      };\n      this.prev();\n    };\n    this.resetToEnd();\n\n    while (this.index >= 0) {\n      if (this.isComparissonOperator(this.currentToken)) {\n        if (!this.isInGroup()) {\n          return this.handleBinary();\n        };\n      };\n      this.prev();\n    };\n    this.resetToEnd();\n\n    while (this.index >= 0) {\n      if (this.isAdditionOperator(this.currentToken)) {\n        if (!this.isInGroup()) {\n          if (this.previousToken) {\n            if (!this.isOperator(this.previousToken)) {\n              return this.handleBinary();\n            };\n          };\n        };\n      };\n      this.prev();\n    };\n    this.resetToEnd();\n\n    while (this.index >= 0) {\n      if (this.isMultiplicationOperator(this.currentToken)) {\n        if (!this.isInGroup()) {\n          return this.handleBinary();\n        };\n      };\n      this.prev();\n    };\n    this.reset();\n\n    while (this.currentToken) {\n      if (this.isUnaryOperator(this.currentToken)) {\n        if (!this.isInGroup()) {\n          return this.handleUnary();\n        };\n      };\n      this.next();\n    };\n    this.reset();\n\n    while (this.currentToken) {\n      if (this.currentToken.type == 'BAR') {\n        return this.handleCall();\n      };\n      this.next();\n    };\n    this.reset();\n\n    while (this.currentToken) {\n      if (this.currentToken.type == \"LPAREN\") {\n        this.next();\n        return this.handleOpenParen();\n      };\n      this.next();\n    };\n    this.reset();\n\n    while (this.currentToken) {\n      if (this.currentToken.type == \"NUMBER\" || this.currentToken.type == \"STRING\") {\n        return this.handlePrimary();\n      };\n      this.next();\n    };\n    this.reset();\n\n    while (this.currentToken) {\n      if (this.currentToken.type == \"IDENTIFIER\") {\n        return this.handleVariable();\n      };\n      this.next();\n    };\n    this.reset();\n\n    return {\n      value : undefined,\n    };\n\n  };\n};\n\nmodule.exports = {\n  Evaluator,\n};\n\n\n\n// const { Environment } = require('../environment/Environment');\n// const { Lexer } = require('../lexer/lexer');\n\n// console.time('parsing')\n// const env = new Environment();\n// const lexer = new Lexer(\"1\");\n// const parser = new Parser(env);\n// parser.load(lexer.tokens);\n// result = parser.parse();\n// console.log(result);\n\n// console.timeEnd('parsing')","import React from 'react';\n\nconst AppContext = React.createContext('app');\n\nexport default AppContext;","import React , { Component } from 'react';\nimport AppContext from './AppContext';\n\nimport { Zap } from 'jzap';\n\nclass ContextProvider extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      'value': `@a = 0;\n\nwhile (a < 100) {\n  @b = 2;\n  @notprime = 0;\n  while (b < (a / 2)) {\n    if (!(a % b == 0)) {\n      b = b+1;\n    } else {\n      b = a;\n      notprime = 1;\n    };\n  };\n  if (!notprime) {\n    show a;\n    show 'is prime';\n  };\n  a = a + 1;\n};\n`,\n      'result': [],\n    };\n  };\n\n  setValue = (value) => {\n    this.setState({\n      value,\n    });\n  };\n\n  execute = () => {\n    const program = new Zap(this.state.value);\n    const logs = program.interpreter.parser.log.values;\n    this.setState({\n      result : logs\n    });\n  };\n\n  render () {\n    const contextValues = {\n      state: this.state,\n      setValue: this.setValue,\n      execute: this.execute,\n    };\n    \n    return (\n      <AppContext.Provider value={contextValues}>\n        {this.props.children}\n      </AppContext.Provider>\n    );\n  };\n};\n\nexport default ContextProvider;","import styled from 'styled-components';\n\nconst BannerContainer = styled.div`\n  height: 100%;\n  background: linear-gradient${props => props.gradient};\n  &:hover {\n    background-color: white;\n  }\n`\n\nconst CodeContainer = styled.div`\n  height: 100%;\n  display: flex;\n  justify-content: space-evenly;\n`\n\nexport {\n  BannerContainer,\n  CodeContainer,\n};","import styled from 'styled-components';\n\nconst SectionContainer = styled.div`\n  width: 40%;\n  margin: 25vh 0;\n  padding: 0 10px;\n  display: flex;\n  background-color: rgba(0, 0, 0, 0.1);\n  border-radius: 5px;\n  flex-direction: column;\n  justify-content: space-evenly;\n`\n\nconst Button = styled.div`\n  transition: 0.3s ease all;\n  display: inline-block;\n  border-radius: 3px;\n  padding: 0.5rem 0;\n  margin: 0 auto;\n  text-align: center;\n  width: 11rem;\n  background: transparent;\n  color: white;\n  border: 2px solid white;\n  cursor: pointer;\n\n  &:hover {\n    background: white;\n    color: palevioletred;\n  }\n`\n\nexport {\n  SectionContainer,\n  Button,\n};","import React , { Component } from 'react';\nimport { Button , SectionContainer } from './styles';\nimport { Controlled as CodeMirror } from 'react-codemirror2'\n\nimport AppContext from '../../../context/AppContext';\n\nrequire('codemirror/lib/codemirror.css');\nrequire('codemirror/theme/dracula.css');\nrequire('codemirror/theme/neat.css');\nrequire('codemirror/mode/xml/xml.js');\nrequire('codemirror/mode/javascript/javascript.js');\n\n\nclass Editor extends Component {\n  constructor (props) {\n    super (props);\n    this.state = {\n      value: '',\n    };\n  };\n\n  render () {\n    return (\n      <SectionContainer>\n        <CodeMirror\n          value={this.context.state.value}\n          options={{\n            mode: 'javascript',\n            theme: 'dracula',\n            lineNumbers: true\n          }}\n          onBeforeChange={(editor, data, value) => {\n            this.setState({value});\n            this.context.setValue(this.state.value);\n          }}\n          onChange={(editor, data, value) => {\n          }}\n        />\n\n        <Button onClick={this.context.execute}>Run</Button>\n      </SectionContainer>\n    );\n  };\n};\n\nEditor.contextType = AppContext;\n\nexport default Editor;","import styled , { css } from 'styled-components';\n\nconst Container = styled.div`\n  width: 40%;\n  margin: 25vh 0;\n\n  background-color: rgb(18 18 18);\n  border-radius: 5px;\n  overflow: hidden;\n\n  position: relative;\n`\n\nconst DotContainer = styled.div`\n  display: flex;\n  height: 40px;\n  position: absolute;\n`\n\nconst Dot = styled.div`\n  height: 10px;\n  width: 10px;\n  top: 10px;\n  border-radius: 50%;\n  position: relative;\n\n  ${props => css`\n    left: ${props.left};\n    background-color: ${props.color};\n    border: 1px solid ${props.color};\n  `}\n`\nconst TextField = styled.div`\n  position: absolute;\n  height: 95%;\n  top: 30px;\n  margin: 0 10px;\n  color: white;\n  font-family: monospace;\n  overflow: scroll;\n\n  // border: 1px solid red;\n\n  ::-webkit-scrollbar {\n    width: 0px;\n    background: transparent;\n  }\n`\n\nexport {\n  Container,\n  Dot,\n  DotContainer,\n  TextField,\n};","import React , { Component } from 'react';\nimport { Container , Dot , DotContainer , TextField } from './styles';\nimport AppContext from '../../../context/AppContext';\n\nclass Terminal extends Component {\n  getDate() {\n    const monthNames = [\n      \"Jan\", \"Feb\", \"Marc\", \"Apr\", \"May\", \"June\",\n      \"July\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"\n    ];\n\n    const weekDays = [\n      \"Sun\", \"Mon\", \"Tues\", \"Wed\", \"Thurs\", \"Fri\", \"Sat\"\n    ];\n\n    const d = new Date();\n    const weekDay = weekDays[d.getDay()];\n    const day = d.getDate()\n    const month = monthNames[d.getMonth()];\n    const hour = d.getHours();\n    const minute = d.getMinutes();\n    const sec = d.getSeconds();\n    return (`${weekDay} ${month} ${day} ${hour}:${minute}:${sec}`)\n  }\n\n  render() {\n    return (\n      <Container>\n        <DotContainer>\n          <Dot left='10px' color='rgb(256, 93, 91)' />\n          <Dot left='17px' color='rgb(254, 188, 64)' />\n          <Dot left='24px' color='rgb(51, 199, 72)' />\n        </DotContainer>\n        <TextField>\n          <span>Last login: {this.getDate()} on ttys002</span>\n          <br/>\n          <br/>\n          {\n            this.context.state.result.map((log, index) => {\n              return (\n                <React.Fragment key={index}>\n                  <span>{log}</span>\n                  <br/>\n                </React.Fragment>\n              );\n            })\n          }\n        </TextField>\n      </Container>\n    )\n  };\n};\n\nTerminal.contextType = AppContext;\n\nexport default Terminal;","import styled from 'styled-components';\n\nconst Pic = styled.div`\n  height: 100px;\n  width: 150px;\n  background-repeat: no-repeat;\n  background-size: contain;\n  background-image: url('/logo.png');\n`\n\nconst Slogan = styled.span`\n  font-family: 'Orbitron', sans-serif;\n  font-weight: bold;\n`\n\nconst LogoContainer = styled.div`\n  position: absolute;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 25%;\n  color: white;\n`\n\nexport {\n  Pic,\n  Slogan,\n  LogoContainer,\n};","import React , { Component } from 'react';\nimport { Pic , Slogan , LogoContainer } from './styles';\n\nclass Logo extends Component {\n  render() {\n    return (\n      <LogoContainer>\n        <Pic />\n        <Slogan>A Javscript Interpreted Language</Slogan>\n      </LogoContainer>\n    );\n  };\n};\n\nexport default Logo;","import styled, { keyframes } from 'styled-components';\n\nconst moveUpDown = keyframes`\n  0%, 100% {\n    margin-top: 100px;\n  }\n  50% {\n    margin-top: 85px;\n  }\n`;\n\nconst FooterContainer = styled.div`\n  position: absolute;\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  height: 25%;\n  color: white;\n  font-family: 'Orbitron', sans-serif;\n  bottom: 0;\n`\n\nconst FooterText = styled.span`\n  position: absolute;\n`\n\nconst DownArrow = styled.div`\n  height: 50px;\n  width: 50px;\n  background-repeat: no-repeat;\n  background-size: contain;\n  background-position: center;\n  background-image: url('/down-arrow.png');\n  animation: ${moveUpDown} 2s linear infinite;\n`\n\nexport {\n  FooterContainer,\n  FooterText,\n  DownArrow,\n};","import React , { Component } from 'react';\nimport { FooterContainer , FooterText , DownArrow } from './styles';\n\nclass Footer extends Component {\n  render() {\n    return (\n      <FooterContainer>\n        <FooterText>Read the Docs</FooterText>\n        <DownArrow />\n      </FooterContainer>\n    );\n  };\n};\n\nexport default Footer;","import React, { Component } from 'react';\nimport { BannerContainer , CodeContainer } from './styles';\nimport Editor from '../Editor/Editor';\nimport Terminal from '../Terminal/Terminal';\nimport Logo from '../Logo/Logo';\nimport Footer from '../Footer/Footer';\n\nclass Banner extends Component {\n  render () {\n    const gradientList = [\n      '(to right, #ff5f6d, #ffc371)',\n      '(to right, #ffafbd, #ffc3a0)',\n      '(to right, #2193b0, #6dd5ed)',\n      '(to right, #ee9ca7, #ffdde1)',\n      '(to right, #ee9ca7, #ffdde1)',\n      '(to right, #06beb6, #48b1bf)',\n      '(to right, #eb3349, #f45c43)',\n      '(to right, #dd5e89, #f7bb97)',\n      '(to right, #56ab2f, #a8e063)',\n      '(to right, #614385, #516395)',\n      '(to right, #eecda3, #ef629f)',\n\n    ]\n    return (\n      <BannerContainer\n      gradient={gradientList[Math.floor(Math.random() * gradientList.length)]}\n      >\n        <Logo />\n        <CodeContainer>\n          <Editor />\n          <Terminal />\n        </CodeContainer>\n        <Footer />\n      </BannerContainer>\n    );\n  };\n};\n\nexport default Banner;","import React from 'react';\nimport ContextProvider from './context/ContextProvider';\n\nimport Banner from './components/banner/Banner/Container';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ContextProvider>\n        <Banner />\n      </ContextProvider>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","class ErrorHandler {\n  throw(msg, line, col) {\n    let err;\n    if (line && col) {\n      err = `\\n\\n${msg} -- ln: ${line}, col: ${col}\\n`\n    } else {\n      err = `\\n\\n${msg}\\n`\n    };\n    try {\n      throw new Error(err);\n    } catch (e) {\n      console.error(e);\n      // process.exit(1);\n    };\n  };\n};\n\nmodule.exports = {\n  ErrorHandler,\n};"],"sourceRoot":""}